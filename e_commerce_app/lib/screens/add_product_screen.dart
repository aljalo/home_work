import 'package:e_commerce_app/cubit/add_product/add_product_cubit.dart';
import 'package:e_commerce_app/models/product_model.dart';
import 'package:e_commerce_app/widgets/custom_text_field.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class AddProductScreen extends StatefulWidget {
  const AddProductScreen({super.key});

  @override
  State<AddProductScreen> createState() => _AddProductScreenState();
}

class _AddProductScreenState extends State<AddProductScreen> {
  final TextEditingController titleController = TextEditingController();
  final TextEditingController priceController = TextEditingController();
  final TextEditingController descriptionController = TextEditingController();
  final TextEditingController imageController = TextEditingController();
  final TextEditingController categoryController = TextEditingController();

  void addProduct() {
    final product = ProductModel(
      id: 0, // ID is usually generated by backend for new products
      title: titleController.text,
      price: num.tryParse(priceController.text) ?? 0,
      description: descriptionController.text,
      image: imageController.text,
      category: categoryController.text, // This maps to categoryId in the service
    );
    context.read<AddProductCubit>().addProduct(product); // Call new AddProductCubit
    Navigator.pop(context); // Pop immediately, Home screen listener will show success/error
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add Product')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              CustomTextField(controller: titleController, labelText: 'Title'),
              CustomTextField(
                controller: priceController,
                labelText: 'Price',
                keyboardType: TextInputType.number,
              ),
              CustomTextField(controller: descriptionController, labelText: 'Description'),
              CustomTextField(controller: imageController, labelText: 'Image URL'),
              CustomTextField(controller: categoryController, labelText: 'Category'),
              const SizedBox(height: 20),
              // Optional: You can use a BlocListener here to show loading state
              BlocBuilder<AddProductCubit, AddProductState>(
                builder: (context, state) {
                  return ElevatedButton(
                    onPressed: state is AddProductLoading ? null : addProduct, // Disable button while loading
                    child: state is AddProductLoading
                        ? const CircularProgressIndicator(color: Colors.white)
                        : const Text('Add Product'),
                  );
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}